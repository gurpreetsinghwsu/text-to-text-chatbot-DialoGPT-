# -*- coding: utf-8 -*-
"""Text to Text Model .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DUih-RBnDQ7NIHfPoxtOn3FnnZVmgy3p
"""

pip install transformers torch datasets

from transformers import AutoModelForCausalLM, AutoTokenizer

model_name = "microsoft/DialoGPT-medium"
model = AutoModelForCausalLM.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)

input_text = "Hello, how are you?"
input_ids = tokenizer.encode(input_text, return_tensors="pt")

response_ids = model.generate(input_ids, max_length=50, pad_token_id=tokenizer.eos_token_id)
response = tokenizer.decode(response_ids[:, input_ids.shape[-1]:][0], skip_special_tokens=True)
print(response)

while True:
    user_input = input("You: ")
    if user_input.lower() == "exit":
        break
    input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors='pt')
    response_ids = model.generate(input_ids, max_length=100, pad_token_id=tokenizer.eos_token_id)
    response = tokenizer.decode(response_ids[:, input_ids.shape[-1]:][0], skip_special_tokens=True)
    print(f"Bot: {response}")



from gtts import gTTS
from IPython.display import Audio, display
import os
import time

while True:
    # Get user input
    user_input = input("You: ")
    if user_input.lower() == "exit":
        break

    # Generate response from the model
    input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors='pt')
    response_ids = model.generate(input_ids, max_length=100, pad_token_id=tokenizer.eos_token_id)
    response = tokenizer.decode(response_ids[:, input_ids.shape[-1]:][0], skip_special_tokens=True)

    # Print the bot's response for clarity
    print(f"Bot: {response}")

    # Convert the response to speech using gTTS
    tts = gTTS(text=response, lang='en')
    audio_file = "response.mp3"

    # Save the audio file
    tts.save(audio_file)

    # Play audio automatically using IPython.display.Audio
    display(Audio(audio_file, autoplay=True))

    # Small delay to ensure the input box appears after audio starts playing
    time.sleep(2)

!pip install gradio

import gradio as gr
from transformers import AutoModelForCausalLM, AutoTokenizer

# Load the model and tokenizer
model_name = "microsoft/DialoGPT-medium"
model = AutoModelForCausalLM.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Function to generate response
def generate_response(user_input):
    input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors='pt')
    response_ids = model.generate(input_ids, max_length=100, pad_token_id=tokenizer.eos_token_id)
    response = tokenizer.decode(response_ids[:, input_ids.shape[-1]:][0], skip_special_tokens=True)
    return response

# Create a Gradio interface
chatbot_ui = gr.Interface(fn=generate_response,
                          inputs="text",
                          outputs="text",
                          title="DialoGPT Chatbot",
                          description="This is a chatbot using DialoGPT. Type your message below.")

# Launch the web interface
chatbot_ui.launch()



import gradio as gr
import random

# Global variable to store OTP and verification status
otp = None
is_verified = False

# Simulated OTP generation function
def send_otp(email):
    global otp
    otp = str(random.randint(1000, 9999))  # Simulating a 4-digit OTP
    return f"OTP for {email} is {otp}. Please enter it below."

# OTP verification function
def verify_otp(user_otp):
    global is_verified
    if user_otp == otp:
        is_verified = True
        return "OTP Verified! Redirecting to Chatbot page..."
    else:
        return "Incorrect OTP. Please try again."

# Chatbot function
def chatbot_response(user_input):
    input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors='pt')
    response_ids = model.generate(input_ids, max_length=100, pad_token_id=tokenizer.eos_token_id)
    response = tokenizer.decode(response_ids[:, input_ids.shape[-1]:][0], skip_special_tokens=True)
    return response

# AI image for the welcome page (Replace this with any AI-generated image URL)
ai_image_url = "/content/image-removebg-preview.png"

# Function to display chatbot only after OTP verification
def show_chatbot():
    return gr.update(visible=is_verified)  # Update the visibility based on verification status

# Custom CSS for the black background
css = """
body {
    background-color: black;
    color: white;
}

.gradio-container {
    background-color: black !important;
}

.gradio-row, .gradio-block {
    border: 1px solid white; /* Thin white border for rows and blocks */
    background-color: black !important; /* Ensures the background is black */
}

input[type="text"], input[type="email"], input[type="password"], textarea {
    background-color: black; /* Black background for text inputs */
    color: white; /* White text for inputs */
    border: 1px solid white; /* White border for inputs */
}
"""

# Main interface components
with gr.Blocks(css=css) as app:
    # Welcome Page
    with gr.Row():
        gr.Markdown("<h2>Welcome to AI Chatbot</h2>")
    with gr.Row():
        gr.Image(ai_image_url, elem_id="welcome_image")
    with gr.Row():
        email_input = gr.Textbox(label="Enter your Gmail")
        send_otp_button = gr.Button("Send OTP")
        otp_sent_output = gr.Textbox(label="OTP Status", interactive=False)

    send_otp_button.click(send_otp, inputs=email_input, outputs=otp_sent_output)

    # OTP Verification
    otp_input = gr.Textbox(label="Enter OTP")
    verify_otp_button = gr.Button("Verify OTP")
    otp_status_output = gr.Textbox(label="OTP Verification Status", interactive=False)

    verify_otp_button.click(verify_otp, inputs=otp_input, outputs=otp_status_output)

    # Chatbot Page (Initially hidden, shown after OTP verification)
    with gr.Row(visible=False) as chatbot_section:
        chatbot_input = gr.Textbox(label="You: ", interactive=True)  # Allowing Enter key submission
        chatbot_output = gr.Textbox(label="Bot: ", interactive=False)
        chatbot_submit = gr.Button("Send")
        chatbot_footer = gr.Markdown("<p>Developed by Gurpreet Singh</p>")
        chatbot_footer = gr.Markdown("<p>ECIS, Woosong University</p>")

        # Link chatbot function to button and also to Enter key
        chatbot_input.submit(chatbot_response, inputs=chatbot_input, outputs=chatbot_output)

    # After verifying OTP, show chatbot section
    verify_otp_button.click(show_chatbot, outputs=chatbot_section)

# Launch the app
app.launch()